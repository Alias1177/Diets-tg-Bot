package bot

import (
	"context"
	"diet-bot/internal/db"
	"diet-bot/internal/gpt"
	"diet-bot/internal/models"
	"diet-bot/internal/payment"
	"diet-bot/pkg/logger"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"sync"
	"time"
)

const (
	StateStart      = "start"
	StateGender     = "gender"
	StateHeight     = "height"
	StateWeight     = "weight"
	StateGoal       = "goal"
	StateConfirm    = "confirm"
	StatePayment    = "payment"
	StateProcessing = "processing"
	StateComplete   = "complete"
)

type TelegramBot struct {
	bot          *tgbotapi.BotAPI
	db           *db.PostgresDB
	stripeClient *payment.StripeClient
	gptClient    *gpt.Client
	logger       *logger.Logger
	userStates   map[int64]*models.UserState
	stateMutex   sync.RWMutex
	callbackURL  string
}

func NewTelegramBot(token string, db *db.PostgresDB, stripeClient *payment.StripeClient, gptClient *gpt.Client, logger *logger.Logger) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create Telegram bot: %w", err)
	}

	// Enable debug mode for more detailed logging
	bot.Debug = true

	logger.Info("Authorized on Telegram", "username", bot.Self.UserName)

	return &TelegramBot{
		bot:          bot,
		db:           db,
		stripeClient: stripeClient,
		gptClient:    gptClient,
		logger:       logger,
		userStates:   make(map[int64]*models.UserState),
		stateMutex:   sync.RWMutex{},
		callbackURL:  fmt.Sprintf("https://t.me/%s", bot.Self.UserName),
	}, nil
}

// Start begins receiving updates from Telegram via polling
func (t *TelegramBot) Start(ctx context.Context) error {
	// First, remove any existing webhook to ensure we can use polling
	t.logger.Info("Removing any existing webhook")
	_, err := t.bot.Request(tgbotapi.DeleteWebhookConfig{
		DropPendingUpdates: true,
	})
	if err != nil {
		return fmt.Errorf("failed to delete webhook: %w", err)
	}

	t.logger.Info("Webhook removed, starting polling for updates")

	// Configure update channel
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	// Start receiving updates
	updates := t.bot.GetUpdatesChan(updateConfig)

	t.logger.Info("Started receiving Telegram updates")

	// Handle updates in a goroutine
	go t.handleUpdates(ctx, updates)

	return nil
}

// handleUpdates processes incoming updates from Telegram
func (t *TelegramBot) handleUpdates(ctx context.Context, updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		go func(update tgbotapi.Update) {
			// Add recovery for panics
			defer func() {
				if r := recover(); r != nil {
					t.logger.Error("Recovered from panic while processing update", "error", r)
				}
			}()

			t.logger.Info("Received update", "update_id", update.UpdateID)

			if update.Message != nil {
				// Process message
				t.logger.Info("Received message",
					"chat_id", update.Message.Chat.ID,
					"from", update.Message.From.UserName,
					"text", update.Message.Text)

				if update.Message.IsCommand() {
					// Handle commands
					t.handleCommand(update.Message)
				} else {
					// Handle regular messages based on user state
					t.handleMessage(update.Message)
				}
			} else if update.CallbackQuery != nil {
				// Handle callback queries (e.g., from inline buttons)
				t.handleCallbackQuery(update.CallbackQuery)
			}
		}(update)
	}
}

// handleCommand processes bot commands
func (t *TelegramBot) handleCommand(message *tgbotapi.Message) {
	command := message.Command()
	chatID := message.Chat.ID
	userID := message.From.ID

	t.logger.Info("Handling command", "command", command, "user_id", userID)

	switch command {
	case "start":
		// Check if this is a payment callback
		if message.CommandArguments() == "payment_success" {
			// Handle successful payment
			t.stateMutex.RLock()
			state, exists := t.userStates[userID]
			t.stateMutex.RUnlock()

			if exists && state.StripeSessionID != "" {
				// Send confirmation message
				msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
				t.bot.Send(msg)

				// Process payment asynchronously
				go func() {
					// In a real implementation, you would verify the payment status with Stripe
					// For now, we'll simulate success
					t.handlePaymentSuccess(userID, state.StripeSessionID)
				}()
				return
			}
		} else if message.CommandArguments() == "payment_cancel" {
			// Handle cancelled payment
			msg := tgbotapi.NewMessage(chatID, "–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
			t.bot.Send(msg)

			// Reset user state
			t.stateMutex.Lock()
			t.userStates[userID] = &models.UserState{
				TelegramID:    userID,
				CurrentState:  StateStart,
				TemporaryData: make(map[string]interface{}),
			}
			t.stateMutex.Unlock()
			return
		}

		// Initialize user state
		t.stateMutex.Lock()
		t.userStates[userID] = &models.UserState{
			TelegramID:    userID,
			CurrentState:  StateGender,
			TemporaryData: make(map[string]interface{}),
		}
		t.stateMutex.Unlock()

		// Send welcome message with gender selection
		replyMarkup := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ú—É–∂—Å–∫–æ–π"),
				tgbotapi.NewKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"),
			),
		)

		msg := tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:")
		msg.ReplyMarkup = replyMarkup

		sent, err := t.bot.Send(msg)
		if err != nil {
			t.logger.Error("Failed to send start message", "error", err)
		} else {
			t.logger.Info("Sent start message", "message_id", sent.MessageID)
		}

	case "help":
		// Send help information
		msg := tgbotapi.NewMessage(chatID, "–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.")
		_, err := t.bot.Send(msg)
		if err != nil {
			t.logger.Error("Failed to send help message", "error", err)
		}

	default:
		// Unknown command
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
		_, err := t.bot.Send(msg)
		if err != nil {
			t.logger.Error("Failed to send unknown command message", "error", err)
		}
	}
}

// handleMessage processes regular messages based on user state
func (t *TelegramBot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID
	text := message.Text

	// Get user state
	t.stateMutex.RLock()
	state, exists := t.userStates[userID]
	t.stateMutex.RUnlock()

	if !exists {
		// User has no state, prompt to start
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
		_, err := t.bot.Send(msg)
		if err != nil {
			t.logger.Error("Failed to send no state message", "error", err)
		}
		return
	}

	t.logger.Info("Processing message based on state",
		"user_id", userID,
		"state", state.CurrentState,
		"text", text)

	// Process based on current state
	switch state.CurrentState {
	case StateGender:
		if text != "–ú—É–∂—Å–∫–æ–π" && text != "–ñ–µ–Ω—Å–∫–∏–π" {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")
			msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–ú—É–∂—Å–∫–æ–π"),
					tgbotapi.NewKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"),
				),
			)
			t.bot.Send(msg)
			return
		}

		// Save gender and move to next state
		state.TemporaryData["gender"] = text
		state.CurrentState = StateHeight

		// Ask for height
		msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		t.bot.Send(msg)

	case StateHeight:
		// Try to parse height
		height, err := strconv.Atoi(text)
		if err != nil || height < 50 || height > 250 {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
			t.bot.Send(msg)
			return
		}

		// Save height and move to next state
		state.TemporaryData["height"] = height
		state.CurrentState = StateWeight

		// Ask for weight
		msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):")
		t.bot.Send(msg)

	case StateWeight:
		// Try to parse weight
		weight, err := strconv.Atoi(text)
		if err != nil || weight < 30 || weight > 300 {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):")
			t.bot.Send(msg)
			return
		}

		// Save weight and move to next state
		state.TemporaryData["weight"] = weight
		state.CurrentState = StateGoal

		// Ask for goal
		msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å"),
				tgbotapi.NewKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å"),
			),
		)
		t.bot.Send(msg)

	case StateGoal:
		validGoals := map[string]bool{
			"–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å":      true,
			"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": true,
			"–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å":      true,
		}

		if !validGoals[text] {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")
			msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å"),
					tgbotapi.NewKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"),
				),
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å"),
				),
			)
			t.bot.Send(msg)
			return
		}

		// Save goal and move to confirmation
		state.TemporaryData["goal"] = text
		state.CurrentState = StateConfirm

		// Show summary and ask for confirmation
		gender := state.TemporaryData["gender"].(string)
		height := state.TemporaryData["height"].(int)
		weight := state.TemporaryData["weight"].(int)
		goal := state.TemporaryData["goal"].(string)

		summary := fmt.Sprintf("–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n–ü–æ–ª: %s\n–†–æ—Å—Ç: %d —Å–º\n–í–µ—Å: %d –∫–≥\n–¶–µ–ª—å: %s\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", gender, height, weight, goal)

		msg := tgbotapi.NewMessage(chatID, summary)
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ"),
				tgbotapi.NewKeyboardButton("–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å"),
			),
		)
		t.bot.Send(msg)

	case StateConfirm:
		if text == "–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å" {
			// Reset to beginning of form
			state.CurrentState = StateGender
			state.TemporaryData = make(map[string]interface{})

			msg := tgbotapi.NewMessage(chatID, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:")
			msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–ú—É–∂—Å–∫–æ–π"),
					tgbotapi.NewKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"),
				),
			)
			t.bot.Send(msg)
			return
		}

		if text != "–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ" {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
			t.bot.Send(msg)
			return
		}

		// Process confirmation and proceed to payment
		ctx := context.Background()
		gender := state.TemporaryData["gender"].(string)
		height := state.TemporaryData["height"].(int)
		weight := state.TemporaryData["weight"].(int)
		goal := state.TemporaryData["goal"].(string)

		// Process goal text
		goalText := goal
		if goal == "–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å" {
			goalText = "–°–Ω–∏–∑–∏—Ç—å"
		} else if goal == "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å" {
			goalText = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å"
		} else if goal == "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å" {
			goalText = "–ù–∞–±—Ä–∞—Ç—å"
		}

		// Create user object
		user := &models.User{
			TelegramID: userID,
			ChatID:     chatID,
			Username:   message.From.UserName,
			Gender:     gender,
			Height:     height,
			Weight:     weight,
			Goal:       goalText,
		}

		// Save to database
		err := t.db.SaveUser(ctx, user)
		if err != nil {
			t.logger.Error("Failed to save user data", "error", err)
			msg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			t.bot.Send(msg)
			return
		}

		// Move to payment state
		state.CurrentState = StatePayment

		// Send payment info
		msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 1000 —Ä—É–±.")
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		t.bot.Send(msg)

		// Create a Stripe checkout session
		// Create a Stripe checkout session
		successURL := fmt.Sprintf("https://t.me/%s?start=payment_success", t.bot.Self.UserName)
		cancelURL := fmt.Sprintf("https://t.me/%s?start=payment_cancel", t.bot.Self.UserName)

		sessionID, checkoutURL, err := t.stripeClient.CreateCheckoutSession(userID, successURL, cancelURL)
		if err != nil {
			t.logger.Error("Failed to create Stripe session", "error", err)
			msg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			t.bot.Send(msg)
			return
		}

		// Save session ID to user state
		state.StripeSessionID = sessionID

		// Create a payment record in the database
		payment := &models.Payment{
			UserID:          user.ID,
			Amount:          1000,
			Currency:        "rub",
			StripePaymentID: sessionID,
			Status:          "pending",
		}
		err = t.db.SavePayment(ctx, payment)
		if err != nil {
			t.logger.Error("Failed to save payment record", "error", err)
			// Continue anyway, as this is not critical for the user
		}

		// Send the real payment link using URL directly from Stripe
		paymentMsg := tgbotapi.NewMessage(chatID, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:")
		paymentMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–û–ø–ª–∞—Ç–∏—Ç—å", checkoutURL),
			),
		)
		t.bot.Send(paymentMsg)
	default:
		// Unknown state, reset to start
		msg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
		t.bot.Send(msg)

		// Reset state
		t.stateMutex.Lock()
		t.userStates[userID] = &models.UserState{
			TelegramID:    userID,
			CurrentState:  StateStart,
			TemporaryData: make(map[string]interface{}),
		}
		t.stateMutex.Unlock()
	}
}

// handleCallbackQuery processes callback queries from inline keyboards
func (t *TelegramBot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	// Process callback data
	t.logger.Info("Received callback query",
		"from", callbackQuery.From.UserName,
		"data", callbackQuery.Data)

	// Acknowledge the callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	t.bot.Request(callback)

	// Handle specific callback actions if needed
}

// Stop gracefully shuts down the bot
func (t *TelegramBot) Stop(ctx context.Context) error {
	// Stop receiving updates
	t.bot.StopReceivingUpdates()

	// Allow time for handlers to complete
	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-time.After(500 * time.Millisecond):
		return nil
	}
}

// handlePaymentSuccess processes successful payments
func (t *TelegramBot) handlePaymentSuccess(userID int64, paymentIntentID string) {
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	t.logger.Info("Processing successful payment", "userID", userID, "paymentID", paymentIntentID)

	// Get user from database
	user, err := t.db.GetUser(ctx, userID)
	if err != nil {
		t.logger.Error("Failed to get user data", "error", err, "userID", userID)
		return
	}

	// Update payment status
	err = t.db.UpdatePaymentStatus(ctx, paymentIntentID, "completed")
	if err != nil {
		t.logger.Error("Failed to update payment status", "error", err, "paymentID", paymentIntentID)
		return
	}

	// Get payment record
	payment, err := t.db.GetPaymentByStripeID(ctx, paymentIntentID)
	if err != nil {
		t.logger.Error("Failed to get payment record", "error", err, "paymentID", paymentIntentID)
		return
	}

	// Generate diet plan with GPT
	t.logger.Info("Generating diet plan with GPT", "userID", userID)
	planText, err := t.gptClient.GenerateDietPlan(ctx, user)
	if err != nil {
		t.logger.Error("Failed to generate diet plan", "error", err, "userID", userID)

		// Send error message to user
		msg := tgbotapi.NewMessage(user.ChatID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
		_, _ = t.bot.Send(msg)
		return
	}

	// Save diet plan to database
	dietPlan := &models.DietPlan{
		UserID:    user.ID,
		PaymentID: payment.ID,
		PlanText:  planText,
	}

	err = t.db.SaveDietPlan(ctx, dietPlan)
	if err != nil {
		t.logger.Error("Failed to save diet plan", "error", err, "userID", userID)
	}

	// Send diet plan to user
	t.logger.Info("Sending diet plan to user", "userID", userID, "chatID", user.ChatID)
	msg := tgbotapi.NewMessage(user.ChatID, "üéâ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"+planText)
	_, err = t.bot.Send(msg)
	if err != nil {
		t.logger.Error("Failed to send diet plan message", "error", err, "chatID", user.ChatID)
	}

	// Update user state
	t.stateMutex.Lock()
	if state, ok := t.userStates[userID]; ok {
		state.CurrentState = StateComplete
	}
	t.stateMutex.Unlock()
}
